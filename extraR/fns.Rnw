<<fns, cache=TRUE, echo=FALSE>>=

stdNormal <- function(border_decoration = FALSE) {
    p <- ggplot2::ggplot(data.frame(x=c(-3, 3)), ggplot2::aes(x)) +
        ggplot2::stat_function(fun=dnorm, geom="line", args=list(mean=0, sd=1))

    if (!border_decoration) {
        p <- p + ggplot2::theme(axis.text.x=ggplot2::element_blank(),
                                axis.text.y=ggplot2::element_blank(),
                                axis.ticks.x=ggplot2::element_blank(),
                                axis.ticks.y=ggplot2::element_blank()) +
            ggplot2::labs(x="", y="")
    }

    p
}

shade_stdNormal <- function(expr1, expr2) {
    ## TODO put x-axis label at the numbers is expr1/2

    p <- stdNormal()

    ssubset1 <- deparse(substitute(expr1))
    d <- ggplot2::ggplot_build(p)$data[[1]]
    p <- p + ggplot2::geom_area(data=subset(d, eval(parse(text=ssubset1))),
                                ggplot2::aes(x=x, y=y),
                                fill="black", colour="black") +
        ggplot2::scale_x_continuous(breaks=c(0))

    if (!missing(expr2)) {
        ssubset2 <- deparse(substitute(expr2))
        p <- p + ggplot2::geom_area(data=subset(d, eval(parse(text=ssubset2))),
                                    ggplot2::aes(x=x, y=y),
                                    fill="black", colour="black")
    }

    p
}

annotate_stdNormal <- function(x, y) {

    if (length(x) != length(y)) {
        stop("annotate_stdNormal requires arguments x and y to have same length.")
    }
    p <- stdNormal()


    ## TODO pad the labels, not the segments
    o <- order(x)
    pad <- c(-0.5, 0.5)
    for (i in seq_along(x)) {
        p <- p + ggplot2::annotate("segment", x=x[i], xend=x[i],
                              y=0,  yend=y[i],
                              linetype="dashed") +
            ggplot2::annotation_custom(
                         grob=grid::textGrob(bquote(.(round(x[o[i]], 2)))),
                         xmin=(x[o[i]] + pad[i]), xmax=(x[o[i]] + pad[i]),
                         ymin=-0.05, ymax=-0.05)
    }

    gt <- ggplot2::ggplotGrob(p)
    gt$layout$clip[gt$layout$name=="panel"] <- "off"
    grid::grid.draw(gt)
}

clock_time <- function(t) {
    ## change t seconds to clock time

    if (t >= 86400) {
        stop(sprintf("time %f must be less than 86400", t))
    }
    hours <- t/3600
    minutes <- (hours %% 1)*60
    seconds <- (minutes %% 1)*60

    sprintf("%d:%d:%d", floor(hours), floor(minutes), ceiling(seconds))
}

hist_density <- function(x, xlab="") {
    df <- data.frame(x=x)
    s <- sd(x)
    ggplot2::ggplot(data=df, ggplot2::aes(x)) +
        ggplot2::geom_histogram(bins=7, ggplot2::aes(y=..density..)) +
            ggplot2::stat_function(fun=dnorm, geom="line",
                                   args=list(mean=mean(x), sd=sd(x)),
                                   xlim=c(c(min(x)-s, max(x)+s))) +
            ggplot2::theme(axis.text.y=ggplot2::element_blank(),
                           axis.ticks.y=ggplot2::element_blank()) +
            ggplot2::labs(x=xlab, y="")
}

quant_plot <- function(x, xlab="Theoretical Quantiles", ylab="Sample Quantiles") {
    df <- data.frame(x=x)
    xq <- quantile(x, c(0.25, 0.75))
    zq <- qnorm(c(0.25, 0.75))
    slope <- diff(xq) / diff(zq)
    int   <- xq[1] - slope * zq[1]
    ggplot2::ggplot(df, ggplot2::aes(sample=x)) +
        ggplot2::stat_qq(distribution=qnorm) +
            ggplot2::geom_abline(intercept=int, slope=slope) +
            ggplot2::labs(x=xlab, y=ylab)
}



@
